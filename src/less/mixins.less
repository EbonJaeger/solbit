// #region Alignment and Width Mixins

.fullWidth(){
	width: 100%;
}

.halfWidth() {
	width: 50%;
}

.horizontalAlign(@width) when (ispercentage(@width)){
	width: @width;
	margin-left: e("calc((100% - @{width}) / 2)");
	margin-right: e("calc((100% - @{width}) / 2)")
}

.horizontalAlign(@width) when (ispixel(@width)) {
	width: @width;
	margin-left: e("calc(50% - @{width} / 2)");
	margin-right: e("calc(50% - @{width} / 2)");
}

// #endregion

// #region Animation Parametric Mixin - Allows easy adding of animations

.animate(@properties; @duration : 250){

	// #region When the animation is active

	&:not([data-solbit-render-animation="false"]){ // If we are not "overriding" Animation by setting render-animation to false
		transition: e(@properties) unit(@duration, ms); // String escape the provided properties that'll change in transform
		-webkit-transition: e(@properties) unit(@duration, ms); // Same as above, just specific to Webkit
	}

	// #endregion
}

// #region Sliding Mixin
// Returns properties that are used with the parent went the parent has [data-solbit-animation="slide"]

.slide(@pos; @milliseconds){ // Default slide using translateX

	.animate("transform", @milliseconds);

	&[data-solbit-animation="slide"]{
		transform: translateX(@pos); // Set translateX to @pos, where pos can be px, e(calc()), etc.
		-moz-transform: translateX(@pos); // Mozilla Equivelant (where necessary)
		-ms-transform: translateX(@pos); // Microsoft Equivelant (where necessary)
		-webkit-transform: translateX(@pos); // WebKit Equivelant
	}
}

// #endregion